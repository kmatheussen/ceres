***************
*** 4,13 ****
  #include "mammut.h"
  #include "play.h"
  
  pthread_t pthread={0};
  bool thread_is_joinable=false;
  bool dontstop=true;
  
  void PlayWaveConsumer(
  		      void *port,
  		      float **samples,
--- 4,40 ----
  #include "mammut.h"
  #include "play.h"
  
+ #if (defined(__ppc__) && defined(__APPLE__))
+   #include <mach/mach_init.h>
+   #include <mach/task_policy.h>
+   #include <mach/thread_act.h>
+   #include <mach/thread_policy.h>
+   #include <sys/sysctl.h>
+   int get_bus_speed(); /* forward decl */
+ #endif
+ 
  pthread_t pthread={0};
  bool thread_is_joinable=false;
  bool dontstop=true;
  
+ #if (defined(__ppc__) && defined(__APPLE__))
+ int get_bus_speed()
+ {
+     int mib[2];
+     unsigned int miblen;
+     int busspeed;
+     int retval;
+     size_t len;
+ 
+     mib[0]=CTL_HW;
+     mib[1]=HW_BUS_FREQ;
+     miblen=2;
+     len=4;
+     retval = sysctl(mib, miblen, &busspeed, &len, NULL, 0);
+     return busspeed;
+ }
+ #endif
+ 
  void PlayWaveConsumer(
  		      void *port,
  		      float **samples,
***************
*** 35,50 ****
  
    thread_is_joinable=true;
  
    par.sched_priority = sched_get_priority_min(SCHED_RR);
    if(sched_setscheduler(0,SCHED_RR,&par)==-1){
      fprintf(stderr,"Mammut: Unable to set SCHED_RR realtime priority for the player thread.\n");
    }
  
    writesound(PlayWaveConsumer,port);
  
    par.sched_priority = 0;
    sched_setscheduler(0,SCHED_OTHER,&par);
-   
    
    
    ClosePlay(port);
--- 62,103 ----
  
    thread_is_joinable=true;
  
+ #if (defined(__ppc__) && defined(__APPLE__))
+       struct thread_time_constraint_policy ttcpolicy;
+       kern_return_t theError;
+       /* This is in AbsoluteTime units, which are equal to
+          1/4 the bus speed on most machines. */
+       // hard-coded numbers are approximations for 100 MHz bus speed.
+       // assume that app deals in frame-sized chunks, e.g. 30 per second.
+       // ttcpolicy.period=833333;
+       ttcpolicy.period=(get_bus_speed() / 120);
+       // ttcpolicy.computation=60000;
+       ttcpolicy.computation=(get_bus_speed() / 1440);
+       // ttcpolicy.constraint=120000;
+       ttcpolicy.constraint=(get_bus_speed() / 720);
+       ttcpolicy.preemptible=1;
+       theError = thread_policy_set(mach_thread_self(),
+         THREAD_TIME_CONSTRAINT_POLICY, (int *)&ttcpolicy,
+         THREAD_TIME_CONSTRAINT_POLICY_COUNT);
+       if (theError != KERN_SUCCESS)
+         fprintf(stderr, "Can't do thread_policy_set\n");
+ #else  /* POSIX_RT, must be running with root privileges */
+ 
    par.sched_priority = sched_get_priority_min(SCHED_RR);
    if(sched_setscheduler(0,SCHED_RR,&par)==-1){
      fprintf(stderr,"Mammut: Unable to set SCHED_RR realtime priority for the player thread.\n");
    }
  
+ #endif
+ 
    writesound(PlayWaveConsumer,port);
  
+ #if (defined(__ppc__) && defined(__APPLE__))
+ //find out how lower priority 
+ #else
    par.sched_priority = 0;
    sched_setscheduler(0,SCHED_OTHER,&par);
+ #endif  
    
    
    ClosePlay(port);
***************
*** 58,67 ****
  
  static int isinit=0;
  static void playinit(void){
-   system("/usr/bin/givertcap");
-   isinit=1;
- }
  
  void Play(void)
  {
  
--- 111,123 ----
  
  static int isinit=0;
  static void playinit(void){
  
+   #if (defined(__ppc__) && defined(__APPLE__))
+   #else
+     system("/usr/bin/givertcap");
+     isinit=1;
+   #endif
+ }
  void Play(void)
  {
  
